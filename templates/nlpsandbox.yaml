AWSTemplateFormatVersion: 2010-09-09
Description: |
  NLP sandbox infrastructure
Parameters:
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
  # ParkMyCloudManaged:
  #   Description: Allow ParkMyCloud service to start/stop resources
  #   Type: String
  #   Default: 'yes'
  KeyName:
    Description: ec2 Key
    Type: String
    Default: nlpsandbox
  AppPort:
    Description: The port that the application runs on
    Type: Number
    MinValue: 1
    MaxValue: 65535
    Default: 80
    ConstraintDescription: A port number in the range 1 to 65535
  PublicSubnets:
    Description: List of subnets for the ELB
    Type: List<AWS::EC2::Subnet::Id>
  PrivateSubnets:
    Description: List of subnets for the ELB
    Type: List<AWS::EC2::Subnet::Id>
  Scheme:
    Description: Load balancer interface scheme
    Type: String
    AllowedValues:
      - "internet-facing"
      - "internal"
    Default: internet-facing
  SSLCertificateIdArn:
    Type: String
    Description: "SSL certificate Arn"
  # VpcId:
  #   Type: String
  #   Description: "The VPC Id"
  SslPolicy:
    Type: String
    Default: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
    AllowedValues:
      - "ELBSecurityPolicy-TLS-1-2-2017-01"
      - "ELBSecurityPolicy-TLS-1-2-Ext-2018-06"
      - "ELBSecurityPolicy-FS-2018-06"
Resources:

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "Open a port for incoming traffic"
      VpcId: !ImportValue 'us-east-1-nlpsandboxvpc-VPCId'
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: "0.0.0.0/0"
          FromPort: 5000
          ToPort: 5000
          IpProtocol: udp
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  # ELK instance configuration
  ElkInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      # ubuntu base image
      ImageId: ami-0b7906ab614596e7e
      InstanceType: t2.xlarge
      Monitoring: True
      DisableApiTermination: False
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 300
          Encrypted: true
      Tags:
        # - Key: !Ref TagKey
        #   Value: !Ref TagValue
        - Key: Name
          Value: "nlpsandbox-ELK (aws-cf)"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        GroupSet:
        - !ImportValue 'us-east-1-nlpsandboxvpc-VpnSecurityGroup'
        - !GetAtt InstanceSecurityGroup.GroupId
        SubnetId: !ImportValue 'us-east-1-nlpsandboxvpc-PrivateSubnet'
      UserData:
        # install Docker and Docker-compose
        Fn::Base64: |
          #!/bin/bash
          apt-get update -y
          apt-get upgrade -y
          apt-get install docker.io git -y
          service docker start
          usermod -a -G docker ubuntu
          curl -L "https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          su ubuntu
          cd /home/ubuntu/
          git clone https://github.com/nlpsandbox/docker-elk.git

  # NlpSandboxSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: "Nlp Sandbox Instances"
  #     GroupDescription: "Allow for NLP sandbox instances to communicate with each other"
  #     VpcId: !ImportValue 'us-east-1-nlpsandboxvpc-VPCId'
  #     SecurityGroupIngress:
  #       - IpProtocol: -1
  #         FromPort: -1
  #         ToPort: -1
  #         CidrIp: !Sub ${DatanodeInstance.PrivateIp}/32

  # Ec2SecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupName: !Join
  #       - '-'
  #       - - !Ref 'AWS::StackName'
  #         - Ec2SecurityGroup
  #     GroupDescription: EC2 Security Group
  #     # VpcId: !Ref VpcId
  #     VpcId: !ImportValue 'us-east-1-nlpsandboxvpc-VPCId'
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: !Ref AppPort
  #         ToPort: !Ref AppPort
  #         SourceSecurityGroupId: !GetAtt ElbSecurityGroup.GroupId
  #     Tags:
  #       - Key: "Department"
  #         Value: !Ref Department
  #       - Key: "Project"
  #         Value: !Ref Project
  #       - Key: "OwnerEmail"
  #         Value: !Ref OwnerEmail

  # Load balancer security groups
  ElbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - ElbSecurityGroup
      GroupDescription: ELB Security Group
      # VpcId: !Ref VpcId
      VpcId: !ImportValue 'us-east-1-nlpsandboxvpc-VPCId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  # Data Node configuration
  DatanodeInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      # ubuntu base image
      ImageId: ami-0b7906ab614596e7e
      InstanceType: t2.large
      Monitoring: True
      DisableApiTermination: False
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 300
          Encrypted: true
      Tags:
        # - Key: !Ref TagKey
        #   Value: !Ref TagValue
        - Key: Name
          Value: "nlpsandbox-datanode (aws-cf)"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        GroupSet:
        - !ImportValue 'us-east-1-nlpsandboxvpc-VpnSecurityGroup'
        - !GetAtt InstanceSecurityGroup.GroupId
        # - !GetAtt NlpSandboxSecurityGroup.GroupId
        SubnetId: !ImportValue 'us-east-1-nlpsandboxvpc-PrivateSubnet'
      UserData:
        # install Docker and Docker-compose
        Fn::Base64: |
          #!/bin/bash
          apt-get update -y
          apt-get upgrade -y
          apt-get install docker.io git -y
          service docker start
          usermod -a -G docker ubuntu
          curl -L "https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          su ubuntu
          cd /home/ubuntu/
          git clone https://github.com/nlpsandbox/data-node.git
          cd data-node
          sed 's/SERVER_PORT=8080/SERVER_PORT=80/' .env.example > .env
          docker-compose up -d --no-build

  ElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Targets:
        - Id: !Ref DatanodeInstance
          Port: !Ref AppPort
      # VpcId: !Ref VpcId
      VpcId: !ImportValue 'us-east-1-nlpsandboxvpc-VPCId'
      Port: !Ref AppPort
      Protocol: HTTP
      Tags:
        - Key: "Name"
          Value: !Join
            - '-'
            - - !Ref DatanodeInstance
              - "ELB"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: "application"
      IpAddressType: "ipv4"
      Scheme: !Ref Scheme
      SecurityGroups:
        - !GetAtt ElbSecurityGroup.GroupId
      Subnets: !Ref PrivateSubnets
      Tags:
        - Key: "Name"
          Value: !Join
            - '-'
            - - !Ref DatanodeInstance
              - "ELB"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  ElbHttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Certificates:
        - CertificateArn: !Ref SSLCertificateIdArn
      Port: 443
      Protocol: HTTPS
      SslPolicy: !Ref SslPolicy
      DefaultActions:
        - TargetGroupArn: !Ref ElbTargetGroup
          Type: forward

  # Date annotator example instance configuration
  DateAnnotatorExampleInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      # ubuntu base image
      ImageId: ami-0b7906ab614596e7e
      InstanceType: t2.nano
      Monitoring: True
      DisableApiTermination: False
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 100
          Encrypted: true
      Tags:
        # - Key: !Ref TagKey
        #   Value: !Ref TagValue
        - Key: Name
          Value: "nlpsandbox-date-annotator-example (aws-cf)"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        GroupSet:
        - !ImportValue 'us-east-1-nlpsandboxvpc-VpnSecurityGroup'
        - !GetAtt InstanceSecurityGroup.GroupId
        # - !GetAtt NlpSandboxSecurityGroup.GroupId
        SubnetId: !ImportValue 'us-east-1-nlpsandboxvpc-PrivateSubnet'
      UserData:
        # install Docker and Docker-compose
        Fn::Base64: |
          #!/bin/bash
          apt-get update -y
          apt-get upgrade -y
          apt-get install docker.io git -y
          service docker start
          usermod -a -G docker ubuntu
          curl -L "https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          su ubuntu
          cd /home/ubuntu/
          git clone https://github.com/nlpsandbox/date-annotator-example.git
          cd date-annotator-example
          docker-compose up -d --no-build

  DateAnnotatorExampleElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Targets:
        - Id: !Ref DateAnnotatorExampleInstance
          Port: !Ref AppPort
      # VpcId: !Ref VpcId
      VpcId: !ImportValue 'us-east-1-nlpsandboxvpc-VPCId'
      Port: !Ref AppPort
      Protocol: HTTP
      Tags:
        - Key: "Name"
          Value: !Join
            - '-'
            - - !Ref DateAnnotatorExampleInstance
              - "ELB"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  DateAnnotatorExampleLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: "application"
      IpAddressType: "ipv4"
      Scheme: !Ref Scheme
      SecurityGroups:
        - !GetAtt ElbSecurityGroup.GroupId
      Subnets: !Ref PublicSubnets
      Tags:
        - Key: "Name"
          Value: !Join
            - '-'
            - - !Ref DateAnnotatorExampleInstance
              - "ELB"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  DateAnnotatorExampleElbHttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref DateAnnotatorExampleLoadBalancer
      Certificates:
        - CertificateArn: !Ref SSLCertificateIdArn
      Port: 443
      Protocol: HTTPS
      SslPolicy: !Ref SslPolicy
      DefaultActions:
        - TargetGroupArn: !Ref DateAnnotatorExampleElbTargetGroup
          Type: forward

  # Date annotator stub
  DateAnnotatorStubInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      # ubuntu base image
      ImageId: ami-0b7906ab614596e7e
      InstanceType: t2.nano
      Monitoring: True
      DisableApiTermination: False
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 100
          Encrypted: true
      Tags:
        # - Key: !Ref TagKey
        #   Value: !Ref TagValue
        - Key: Name
          Value: "nlpsandbox-date-annotator-stub (aws-cf)"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        GroupSet:
        - !ImportValue 'us-east-1-nlpsandboxvpc-VpnSecurityGroup'
        - !GetAtt InstanceSecurityGroup.GroupId
        # - !GetAtt NlpSandboxSecurityGroup.GroupId
        SubnetId: !ImportValue 'us-east-1-nlpsandboxvpc-PrivateSubnet'
      UserData:
        # install Docker and Docker-compose
        Fn::Base64: |
          #!/bin/bash
          apt-get update -y
          apt-get upgrade -y
          apt-get install docker.io git -y
          service docker start
          usermod -a -G docker ubuntu
          curl -L "https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          su ubuntu
          cd /home/ubuntu/
          git clone https://github.com/nlpsandbox/date-annotator-stub.git
          cd date-annotator-stub
          docker-compose up -d --no-build

  DateAnnotatorStubElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Targets:
        - Id: !Ref DateAnnotatorStubInstance
          Port: !Ref AppPort
      # VpcId: !Ref VpcId
      VpcId: !ImportValue 'us-east-1-nlpsandboxvpc-VPCId'
      Port: !Ref AppPort
      Protocol: HTTP
      Tags:
        - Key: "Name"
          Value: !Join
            - '-'
            - - !Ref DateAnnotatorStubInstance
              - "ELB"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  DateAnnotatorStubLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: "application"
      IpAddressType: "ipv4"
      Scheme: !Ref Scheme
      SecurityGroups:
        - !GetAtt ElbSecurityGroup.GroupId
      Subnets: !Ref PublicSubnets
      Tags:
        - Key: "Name"
          Value: !Join
            - '-'
            - - !Ref DateAnnotatorStubInstance
              - "ELB"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  DateAnnotatorStubElbHttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref DateAnnotatorStubLoadBalancer
      Certificates:
        - CertificateArn: !Ref SSLCertificateIdArn
      Port: 443
      Protocol: HTTPS
      SslPolicy: !Ref SslPolicy
      DefaultActions:
        - TargetGroupArn: !Ref DateAnnotatorStubElbTargetGroup
          Type: forward

  # PHI deidentifier instance configuration
  PhiDeidentifierInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      # ubuntu base image
      ImageId: ami-0b7906ab614596e7e
      InstanceType: t2.medium
      Monitoring: True
      DisableApiTermination: False
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 100
          Encrypted: true
      Tags:
        # - Key: !Ref TagKey
        #   Value: !Ref TagValue
        - Key: Name
          Value: "nlpsandbox-phi-deidentifier (aws-cf)"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        GroupSet:
        - !ImportValue 'us-east-1-nlpsandboxvpc-VpnSecurityGroup'
        - !GetAtt InstanceSecurityGroup.GroupId
        # - !GetAtt NlpSandboxSecurityGroup.GroupId
        SubnetId: !ImportValue 'us-east-1-nlpsandboxvpc-PrivateSubnet'
      UserData:
        # install Docker and Docker-compose
        Fn::Base64: |
          #!/bin/bash
          apt-get update -y
          apt-get upgrade -y
          apt-get install docker.io git -y
          service docker start
          usermod -a -G docker ubuntu
          curl -L "https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          su ubuntu
          cd /home/ubuntu/
          git clone https://github.com/nlpsandbox/phi-deidentifier-app.git
          cd phi-deidentifier-app
          cp .env.example .env
          docker-compose up -d --no-build

  PhiDeidentifierElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Targets:
        - Id: !Ref PhiDeidentifierInstance
          Port: !Ref AppPort
      # VpcId: !Ref VpcId
      VpcId: !ImportValue 'us-east-1-nlpsandboxvpc-VPCId'
      Port: !Ref AppPort
      Protocol: HTTP
      Tags:
        - Key: "Name"
          Value: !Join
            - '-'
            - - !Ref PhiDeidentifierInstance
              - "ELB"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  PhiDeidentifierLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: "application"
      IpAddressType: "ipv4"
      Scheme: !Ref Scheme
      SecurityGroups:
        - !GetAtt ElbSecurityGroup.GroupId
      Subnets: !Ref PublicSubnets
      Tags:
        - Key: "Name"
          Value: !Join
            - '-'
            - - !Ref PhiDeidentifierInstance
              - "ELB"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail

  PhiDeidentifierElbHttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref PhiDeidentifierLoadBalancer
      Certificates:
        - CertificateArn: !Ref SSLCertificateIdArn
      Port: 443
      Protocol: HTTPS
      SslPolicy: !Ref SslPolicy
      DefaultActions:
        - TargetGroupArn: !Ref PhiDeidentifierElbTargetGroup
          Type: forward

  # Nlp sandbox controller instance
  InfrastructureInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      # ubuntu base image
      ImageId: ami-0b7906ab614596e7e
      InstanceType: t3.xlarge
      Monitoring: True
      DisableApiTermination: False
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 300
          Encrypted: true
      Tags:
        # - Key: !Ref TagKey
        #   Value: !Ref TagValue
        - Key: Name
          Value: "nlpsandbox-infrastructure (aws-cf)"
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: "0"
        GroupSet:
        - !ImportValue 'us-east-1-nlpsandboxvpc-VpnSecurityGroup'
        - !GetAtt InstanceSecurityGroup.GroupId
        SubnetId: !ImportValue 'us-east-1-nlpsandboxvpc-PrivateSubnet'
      UserData:
        # install Docker and Docker-compose
        Fn::Base64: |
          #!/bin/bash
          apt-get update -y
          apt-get upgrade -y
          apt-get install docker.io git -y
          service docker start
          usermod -a -G docker ubuntu
          curl -L "https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          su ubuntu
          cd /home/ubuntu
          git clone https://github.com/nlpsandbox/nlpsandbox-client.git
          git clone https://github.com/Sage-Bionetworks/SynapseWorkflowOrchestrator.git

Outputs:
  DatanodeInstancePrivateIp:
    Value: !GetAtt DatanodeInstance.PrivateIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-DatanodeInstancePrivateIp'
  InfrastructureInstancePrivateIp:
    Value: !GetAtt InfrastructureInstance.PrivateIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-InfrastructureInstancePrivateIp'
  PhiDeidentifierInstancePrivateIp:
    Value: !GetAtt PhiDeidentifierInstance.PrivateIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PhiDeidentifierInstancePrivateIp'
  ElkInstancePrivateIp:
    Value: !GetAtt ElkInstance.PrivateIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ElkInstancePrivateIp'
  DateAnnotatorExampleInstancePrivateIp:
    Value: !GetAtt DateAnnotatorExampleInstance.PrivateIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-DateAnnotatorExampleInstancePrivateIp'
  DateAnnotatorStubInstancePrivateIp:
    Value: !GetAtt DateAnnotatorStubInstance.PrivateIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-DateAnnotatorStubInstancePrivateIp'
